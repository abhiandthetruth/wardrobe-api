# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.item_category import ItemCategory
from openapi_server.models.occasion import Occasion
from openapi_server.models.season import Season
from openapi_server.models.time import Time
from openapi_server import util

from openapi_server.models.item_category import ItemCategory  # noqa: E501
from openapi_server.models.occasion import Occasion  # noqa: E501
from openapi_server.models.season import Season  # noqa: E501
from openapi_server.models.time import Time  # noqa: E501

class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, image=None, category=None, size=None, material=None, time=None, season=None, occasion=None, tags=None, colors=None):  # noqa: E501
        """Item - a model defined in OpenAPI

        :param name: The name of this Item.  # noqa: E501
        :type name: str
        :param image: The image of this Item.  # noqa: E501
        :type image: str
        :param category: The category of this Item.  # noqa: E501
        :type category: ItemCategory
        :param size: The size of this Item.  # noqa: E501
        :type size: str
        :param material: The material of this Item.  # noqa: E501
        :type material: str
        :param time: The time of this Item.  # noqa: E501
        :type time: Time
        :param season: The season of this Item.  # noqa: E501
        :type season: Season
        :param occasion: The occasion of this Item.  # noqa: E501
        :type occasion: Occasion
        :param tags: The tags of this Item.  # noqa: E501
        :type tags: List[str]
        :param colors: The colors of this Item.  # noqa: E501
        :type colors: List[str]
        """
        self.openapi_types = {
            'name': str,
            'image': str,
            'category': ItemCategory,
            'size': str,
            'material': str,
            'time': Time,
            'season': Season,
            'occasion': Occasion,
            'tags': List[str],
            'colors': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'image': 'image',
            'category': 'category',
            'size': 'size',
            'material': 'material',
            'time': 'time',
            'season': 'season',
            'occasion': 'occasion',
            'tags': 'tags',
            'colors': 'colors'
        }

        self._name = name
        self._image = image
        self._category = category
        self._size = size
        self._material = material
        self._time = time
        self._season = season
        self._occasion = occasion
        self._tags = tags
        self._colors = colors

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Item.


        :return: The name of this Item.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Item.


        :param name: The name of this Item.
        :type name: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this Item.


        :return: The image of this Item.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Item.


        :param image: The image of this Item.
        :type image: str
        """

        self._image = image

    @property
    def category(self):
        """Gets the category of this Item.


        :return: The category of this Item.
        :rtype: ItemCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Item.


        :param category: The category of this Item.
        :type category: ItemCategory
        """

        self._category = category

    @property
    def size(self):
        """Gets the size of this Item.


        :return: The size of this Item.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Item.


        :param size: The size of this Item.
        :type size: str
        """

        self._size = size

    @property
    def material(self):
        """Gets the material of this Item.


        :return: The material of this Item.
        :rtype: str
        """
        return self._material

    @material.setter
    def material(self, material):
        """Sets the material of this Item.


        :param material: The material of this Item.
        :type material: str
        """

        self._material = material

    @property
    def time(self):
        """Gets the time of this Item.


        :return: The time of this Item.
        :rtype: Time
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Item.


        :param time: The time of this Item.
        :type time: Time
        """

        self._time = time

    @property
    def season(self):
        """Gets the season of this Item.


        :return: The season of this Item.
        :rtype: Season
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Item.


        :param season: The season of this Item.
        :type season: Season
        """

        self._season = season

    @property
    def occasion(self):
        """Gets the occasion of this Item.


        :return: The occasion of this Item.
        :rtype: Occasion
        """
        return self._occasion

    @occasion.setter
    def occasion(self, occasion):
        """Sets the occasion of this Item.


        :param occasion: The occasion of this Item.
        :type occasion: Occasion
        """

        self._occasion = occasion

    @property
    def tags(self):
        """Gets the tags of this Item.


        :return: The tags of this Item.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Item.


        :param tags: The tags of this Item.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def colors(self):
        """Gets the colors of this Item.


        :return: The colors of this Item.
        :rtype: List[str]
        """
        return self._colors

    @colors.setter
    def colors(self, colors):
        """Sets the colors of this Item.


        :param colors: The colors of this Item.
        :type colors: List[str]
        """

        self._colors = colors
