# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.occasion import Occasion
from openapi_server.models.season import Season
from openapi_server.models.time import Time
from openapi_server import util

from openapi_server.models.occasion import Occasion  # noqa: E501
from openapi_server.models.season import Season  # noqa: E501
from openapi_server.models.time import Time  # noqa: E501

class Outfit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, time=None, season=None, occasion=None, topwears=None, bottomwears=None, accessories=None, footwears=None):  # noqa: E501
        """Outfit - a model defined in OpenAPI

        :param name: The name of this Outfit.  # noqa: E501
        :type name: str
        :param time: The time of this Outfit.  # noqa: E501
        :type time: Time
        :param season: The season of this Outfit.  # noqa: E501
        :type season: Season
        :param occasion: The occasion of this Outfit.  # noqa: E501
        :type occasion: Occasion
        :param topwears: The topwears of this Outfit.  # noqa: E501
        :type topwears: List[str]
        :param bottomwears: The bottomwears of this Outfit.  # noqa: E501
        :type bottomwears: List[str]
        :param accessories: The accessories of this Outfit.  # noqa: E501
        :type accessories: List[str]
        :param footwears: The footwears of this Outfit.  # noqa: E501
        :type footwears: List[str]
        """
        self.openapi_types = {
            'name': str,
            'time': Time,
            'season': Season,
            'occasion': Occasion,
            'topwears': List[str],
            'bottomwears': List[str],
            'accessories': List[str],
            'footwears': List[str]
        }

        self.attribute_map = {
            'name': 'name',
            'time': 'time',
            'season': 'season',
            'occasion': 'occasion',
            'topwears': 'topwears',
            'bottomwears': 'bottomwears',
            'accessories': 'accessories',
            'footwears': 'footwears'
        }

        self._name = name
        self._time = time
        self._season = season
        self._occasion = occasion
        self._topwears = topwears
        self._bottomwears = bottomwears
        self._accessories = accessories
        self._footwears = footwears

    @classmethod
    def from_dict(cls, dikt) -> 'Outfit':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Outfit of this Outfit.  # noqa: E501
        :rtype: Outfit
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Outfit.


        :return: The name of this Outfit.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Outfit.


        :param name: The name of this Outfit.
        :type name: str
        """

        self._name = name

    @property
    def time(self):
        """Gets the time of this Outfit.


        :return: The time of this Outfit.
        :rtype: Time
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Outfit.


        :param time: The time of this Outfit.
        :type time: Time
        """

        self._time = time

    @property
    def season(self):
        """Gets the season of this Outfit.


        :return: The season of this Outfit.
        :rtype: Season
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Outfit.


        :param season: The season of this Outfit.
        :type season: Season
        """

        self._season = season

    @property
    def occasion(self):
        """Gets the occasion of this Outfit.


        :return: The occasion of this Outfit.
        :rtype: Occasion
        """
        return self._occasion

    @occasion.setter
    def occasion(self, occasion):
        """Sets the occasion of this Outfit.


        :param occasion: The occasion of this Outfit.
        :type occasion: Occasion
        """

        self._occasion = occasion

    @property
    def topwears(self):
        """Gets the topwears of this Outfit.

        List of Topwear itemIds  # noqa: E501

        :return: The topwears of this Outfit.
        :rtype: List[str]
        """
        return self._topwears

    @topwears.setter
    def topwears(self, topwears):
        """Sets the topwears of this Outfit.

        List of Topwear itemIds  # noqa: E501

        :param topwears: The topwears of this Outfit.
        :type topwears: List[str]
        """

        self._topwears = topwears

    @property
    def bottomwears(self):
        """Gets the bottomwears of this Outfit.

        List of Bottomwear itemIds  # noqa: E501

        :return: The bottomwears of this Outfit.
        :rtype: List[str]
        """
        return self._bottomwears

    @bottomwears.setter
    def bottomwears(self, bottomwears):
        """Sets the bottomwears of this Outfit.

        List of Bottomwear itemIds  # noqa: E501

        :param bottomwears: The bottomwears of this Outfit.
        :type bottomwears: List[str]
        """

        self._bottomwears = bottomwears

    @property
    def accessories(self):
        """Gets the accessories of this Outfit.

        List of Accessory itemIds  # noqa: E501

        :return: The accessories of this Outfit.
        :rtype: List[str]
        """
        return self._accessories

    @accessories.setter
    def accessories(self, accessories):
        """Sets the accessories of this Outfit.

        List of Accessory itemIds  # noqa: E501

        :param accessories: The accessories of this Outfit.
        :type accessories: List[str]
        """

        self._accessories = accessories

    @property
    def footwears(self):
        """Gets the footwears of this Outfit.

        List of Footwear itemIds  # noqa: E501

        :return: The footwears of this Outfit.
        :rtype: List[str]
        """
        return self._footwears

    @footwears.setter
    def footwears(self, footwears):
        """Sets the footwears of this Outfit.

        List of Footwear itemIds  # noqa: E501

        :param footwears: The footwears of this Outfit.
        :type footwears: List[str]
        """

        self._footwears = footwears
