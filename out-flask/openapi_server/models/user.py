# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_id=None, name=None, image=None, email_id=None, password=None, connections=None, wardrobes=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param user_id: The user_id of this User.  # noqa: E501
        :type user_id: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param image: The image of this User.  # noqa: E501
        :type image: str
        :param email_id: The email_id of this User.  # noqa: E501
        :type email_id: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param connections: The connections of this User.  # noqa: E501
        :type connections: List[str]
        :param wardrobes: The wardrobes of this User.  # noqa: E501
        :type wardrobes: List[str]
        """
        self.openapi_types = {
            'user_id': str,
            'name': str,
            'image': str,
            'email_id': str,
            'password': str,
            'connections': List[str],
            'wardrobes': List[str]
        }

        self.attribute_map = {
            'user_id': 'userId',
            'name': 'name',
            'image': 'image',
            'email_id': 'emailId',
            'password': 'password',
            'connections': 'connections',
            'wardrobes': 'wardrobes'
        }

        self._user_id = user_id
        self._name = name
        self._image = image
        self._email_id = email_id
        self._password = password
        self._connections = connections
        self._wardrobes = wardrobes

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self):
        """Gets the user_id of this User.


        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.


        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def image(self):
        """Gets the image of this User.


        :return: The image of this User.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this User.


        :param image: The image of this User.
        :type image: str
        """

        self._image = image

    @property
    def email_id(self):
        """Gets the email_id of this User.


        :return: The email_id of this User.
        :rtype: str
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this User.


        :param email_id: The email_id of this User.
        :type email_id: str
        """

        self._email_id = email_id

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def connections(self):
        """Gets the connections of this User.

        A list of userIds  # noqa: E501

        :return: The connections of this User.
        :rtype: List[str]
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """Sets the connections of this User.

        A list of userIds  # noqa: E501

        :param connections: The connections of this User.
        :type connections: List[str]
        """

        self._connections = connections

    @property
    def wardrobes(self):
        """Gets the wardrobes of this User.

        A list of wardrobeIds  # noqa: E501

        :return: The wardrobes of this User.
        :rtype: List[str]
        """
        return self._wardrobes

    @wardrobes.setter
    def wardrobes(self, wardrobes):
        """Sets the wardrobes of this User.

        A list of wardrobeIds  # noqa: E501

        :param wardrobes: The wardrobes of this User.
        :type wardrobes: List[str]
        """

        self._wardrobes = wardrobes
